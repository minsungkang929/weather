{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getWeather","event","preventDefault","rootEndpoint","concat","city","target","elements","value","endpoint","console","log","fetch","then","response","json","data","cod","weather","description","main","temp","setState","temperature","message","catch","err","error","state","bind","assertThisInitialized","react_default","a","createElement","id","onSubmit","name","type","class","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOA0EeA,qBAtEb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA8BRQ,WAAa,SAACC,GACZA,EAAMC,iBACN,IACMC,EAAY,yDAAAC,OADH,oCAETC,EAAOJ,EAAMK,OAAOC,SAASF,KAAKG,MAClCC,EAAWN,EAAY,gBAAZ,MAAAC,OAELC,GACZK,QAAQC,IAAI,YAAaF,GAEzBG,MAAMH,GACHI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACY,MAAbA,EAAKC,KACNP,QAAQC,IAAIK,GACZN,QAAQC,IAAR,oBAAAP,OAAgCY,EAAKE,QAAQ,GAAGC,cAChDT,QAAQC,IAAR,wBAAAP,OAAoCY,EAAKI,KAAKC,OAE9C5B,EAAK6B,SAAS,CACZJ,QAASF,EAAKE,QAAQ,GAAGC,YACzBI,YAAaP,EAAKI,KAAKC,KACvBG,QAAS,OAGXd,QAAQC,IAAIK,EAAKQ,SACjB/B,EAAK6B,SAAS,CACZE,QAASR,EAAKQ,aAInBC,MAAM,SAAAC,GACPhB,QAAQiB,MAAMD,MA5DhBjC,EAAKmC,MAAQ,CACXV,QAAS,GACTK,YAAa,GACbC,QAAS,IAEX/B,EAAKO,WAAaP,EAAKO,WAAW6B,KAAhBnC,OAAAoC,EAAA,EAAApC,CAAAD,IAPFA,wEAYhB,OACEsC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOC,GAAG,cACRH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,QAAME,SAAUvC,KAAKI,YACnB+B,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,KAAK,SACxBN,EAAAC,EAAAC,cAAA,UAAQC,GAAG,eAAX,iBAIJH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,WAASK,MAAM,WAAW1C,KAAKgC,MAAMJ,SACrCO,EAAAC,EAAAC,cAAA,kCAAyBF,EAAAC,EAAAC,cAAA,QAAMC,GAAG,mBAAmBtC,KAAKgC,MAAMV,UAChEa,EAAAC,EAAAC,cAAA,sCAA6BF,EAAAC,EAAAC,cAAA,QAAMC,GAAG,uBAAuBtC,KAAKgC,MAAML,uBA1BhEgB,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.b5f0bc1a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      weather: \"\",\n      temperature: \"\",\n      message: \"\"\n    }\n    this.getWeather = this.getWeather.bind(this);\n  }\n\n  render(){\n    \n    return(\n      <body>\n        <aside id=\"ui-control\">\n          <h2>Enter a city name</h2>\n          <form onSubmit={this.getWeather}>\n            <input name=\"city\" type=\"text\" />\n            <button id=\"get-weather\" >Get weather</button>\n          </form>\n        </aside>\n\n        <main>\n          <article class=\"message\">{this.state.message}</article>\n          <article>The weather is: <span id=\"current-weather\">{this.state.weather}</span></article>\n          <article>The temperature is: <span id=\"current-temperature\">{this.state.temperature}</span></article>\n        </main>\n      </body>\n    )\n  }\n\n  getWeather = (event) => {\n    event.preventDefault(); // prevent refresh all page\n    const apiKey = 'cda6eec08ccd6643c34c42650d15dcb4';\n    const rootEndpoint = `https://api.openweathermap.org/data/2.5/weather?APPID=${apiKey}`;\n    const city = event.target.elements.city.value;\n    const endpoint = rootEndpoint\n        + `&units=metric`\n        + `&q=${city}`;\n    console.log('Endpoint:', endpoint);\n\n    fetch(endpoint)\n      .then(response => response.json())\n      .then(data => {\n        if(data.cod === 200) {\n          console.log(data);\n          console.log(`Current weather: ${data.weather[0].description}`);\n          console.log(`Current temperature: ${data.main.temp}`);\n          // set the state\n          this.setState({\n            weather: data.weather[0].description,\n            temperature: data.main.temp,\n            message: \"\"\n          })\n        } else {\n          console.log(data.message);\n          this.setState({\n            message: data.message\n          })\n        }\n      \n    }).catch(err => {\n      console.error(err);\n    });\n  }\n}\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}